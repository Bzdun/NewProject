@model Authoring.WebRole.Models.ExhibitContentItem

@{
    ViewBag.Title = "Edit";
}
	<script type="text/javascript">
	    (function ($) {
	        $.widget("ui.combobox", {
	            _create: function () {
	                var self = this,
					select = this.element.hide(),
					selected = select.children(":selected"),
					value = selected.val() ? selected.text() : "";
	                var input = this.input = $("<input>")
					.insertAfter(select)
					.val(value)
					.autocomplete({
					    delay: 0,
					    minLength: 0,
					    source: function (request, response) {
					        var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
					        response(select.children("option").map(function () {
					            var text = $(this).text();
					            if (this.value && (!request.term || matcher.test(text)))
					                return {
					                    label: text.replace(
											new RegExp(
												"(?![^&;]+;)(?!<[^<>]*)(" +
												$.ui.autocomplete.escapeRegex(request.term) +
												")(?![^<>]*>)(?![^&;]+;)", "gi"
											), "<strong>$1</strong>"),
					                    value: text,
					                    option: this
					                };
					        }));
					    },
					    select: function (event, ui) {
					        ui.item.option.selected = true;
					        self._trigger("selected", event, {
					            item: ui.item.option
					        });
					    },
					    change: function (event, ui) {
					        if (!ui.item) {
					            var matcher = new RegExp("^" + $.ui.autocomplete.escapeRegex($(this).val()) + "$", "i"),
									valid = false;
					            select.children("option").each(function () {
					                if ($(this).text().match(matcher)) {
					                    this.selected = valid = true;
					                    return false;
					                }
					            });
					            if (!valid) {
					                // remove invalid value, as it didn't match anything
					                $(this).val("");
					                select.val("");
					                input.data("autocomplete").term = "";
					                return false;
					            }
					        }
					    }
					})
					.addClass("ui-widget ui-widget-content ui-corner-left");

	                input.data("autocomplete")._renderItem = function (ul, item) {
	                    return $("<li></li>")
						.data("item.autocomplete", item)
						.append("<a>" + item.label + "</a>")
						.appendTo(ul);
	                };

	                this.button = $("<button type='button'>&nbsp;</button>")
					.attr("tabIndex", -1)
					.attr("title", "Show All Items")
					.insertAfter(input)
					.button({
					    icons: {
					        primary: "ui-icon-triangle-1-s"
					    },
					    text: false
					})
					.removeClass("ui-corner-all")
					.addClass("ui-corner-right ui-button-icon")
					.click(function () {
					    // close if already visible
					    if (input.autocomplete("widget").is(":visible")) {
					        input.autocomplete("close");
					        return;
					    }

					    // work around a bug (likely same cause as #5265)
					    $(this).blur();

					    // pass empty string as value to search for, displaying all results
					    input.autocomplete("search", "");
					    input.focus();
					});
	            },

	            destroy: function () {
	                this.input.remove();
	                this.button.remove();
	                this.element.show();
	                $.Widget.prototype.destroy.call(this);
	            }
	        });
	    })(jQuery);

	    $(function () {
	        $("#ContentItemID").combobox();
	        $("#ExhibitID").combobox();
	        $("#toggle").click(function () {
	            $("#ContentItemID").toggle();
	            $("#ExhibitID").toggle();
	        });
	    });
	</script>

<h2>ExhibitContentItem - Edit</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>ExhibitContentItem</legend>

        @Html.HiddenFor(model => model.ExhibitContentItemID)

        <div class="editor-label">
            @Html.LabelFor(model => model.ExhibitID, "Exhibit")
        </div>
        <div class="editor-field">
            @Html.DropDownList("ExhibitID", String.Empty)
            @Html.ValidationMessageFor(model => model.ExhibitID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ContentItemID, "ContentItem")
        </div>
        <div class="editor-field">
            @Html.DropDownList("ContentItemID", String.Empty)
            @Html.ValidationMessageFor(model => model.ContentItemID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Order)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Order)
            @Html.ValidationMessageFor(model => model.Order)
        </div>

        <div class="editor-label" style="display:none;">
            @Html.LabelFor(model => model.CreatedOn)
        </div>
        <div class="editor-field" style="display:none;">
            @Html.EditorFor(model => model.CreatedOn)
            @Html.ValidationMessageFor(model => model.CreatedOn)
        </div>

        <div class="editor-label" style="display:none;">
            @Html.LabelFor(model => model.CreatedBy, "User")
        </div>
        <div class="editor-field" style="display:none;">
            @Html.DropDownList("CreatedBy", String.Empty)
            @Html.ValidationMessageFor(model => model.CreatedBy)
        </div>

        <div class="editor-label" style="display:none;">
            @Html.LabelFor(model => model.ModifiedOn)
        </div>
        <div class="editor-field" style="display:none;">
            @Html.EditorFor(model => model.ModifiedOn)
            @Html.ValidationMessageFor(model => model.ModifiedOn)
        </div>

        <div class="editor-label" style="display:none;">
            @Html.LabelFor(model => model.ModifiedBy, "User1")
        </div>
        <div class="editor-field" style="display:none;">
            @Html.DropDownList("ModifiedBy", String.Empty)
            @Html.ValidationMessageFor(model => model.ModifiedBy)
        </div>

        <div class="editor-label" style="display:none;">
            @Html.LabelFor(model => model.IsDeleted)
        </div>
        <div class="editor-field" style="display:none;">
            @Html.EditorFor(model => model.IsDeleted)
            @Html.ValidationMessageFor(model => model.IsDeleted)
        </div>

        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
